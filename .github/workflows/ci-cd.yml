# O nome do seu pipeline de CI/CD
name: CI/CD Pipeline

on:
  # O pipeline irá rodar sempre que houver um push nas branches 'main' ou 'develop'
  push:
    branches: [ main, develop ]
  # O pipeline irá rodar sempre que houver um pull request para a branch 'main'
  pull_request:
    branches: [ main ]
  # roda o pipeline manualmente a partir da UI do GitHub
  workflow_dispatch:

# Adicione o bloco de permissões para a autenticação do Render
permissions:
  contents: read

env:
  # Versão do Node.js, fácil de atualizar
  NODE_VERSION: '20'
  # Versão da Render CLI, fácil de atualizar
  RENDER_CLI_VERSION: '1.1.0'

jobs:
  # Job de Lint e Type Check para garantir a qualidade do código
  lint-and-type-check:
    name: Lint e Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.RENDER_GITHUB_PAT }} # Adicionado o token aqui

      # Configuração do Node.js para o frontend
      - name: Setup Node.js (Frontend)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Instalar dependências frontend
        run: cd frontend && npm ci

      # Configuração do Node.js para o backend
      - name: Setup Node.js (Backend)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Instalar dependências backend
        run: cd backend && npm ci

      - name: Lint frontend
        run: cd frontend && npm run lint

      - name: Type check frontend
        run: cd frontend && npm run type-check

      - name: Verificar sintaxe backend
        run: cd backend && node -c server.js
        
  # Job para buildar o frontend
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.RENDER_GITHUB_PAT }} # Adicionado o token aqui

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: Instalar dependências frontend
        run: cd frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Upload artefatos
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 1
          
  # Job para rodar os testes do backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.RENDER_GITHUB_PAT }} # Adicionado o token aqui

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
          
      - name: Instalar dependências backend
        run: cd backend && npm ci

      - name: Rodar testes backend
        run: cd backend && npm test
        
  # Job para buildar as imagens Docker
  docker-build-and-test:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build-frontend, test-backend]
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.RENDER_GITHUB_PAT }} # Adicionado o token aqui

      - name: Download build frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (Frontend)
        run: |
          docker build -t atende-frontend:test -f ./frontend/Dockerfile .

      - name: Build Docker image (Backend)
        run: |
          docker build -t atende-backend:test ./backend

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [docker-build-and-test]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    env:
      # A chave de API para o Render CLI
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      # Adicionando o token do GitHub para a CLI do Render
      GITHUB_TOKEN: ${{ secrets.RENDER_GITHUB_PAT }}
      
    steps:
      # Faz o checkout do repositório
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.RENDER_GITHUB_PAT }}
      
      - name: Instalar Render CLI
        run: |
          curl -L https://github.com/render-oss/cli/releases/download/v${{ env.RENDER_CLI_VERSION }}/cli_${{ env.RENDER_CLI_VERSION }}_linux_amd64.zip -o render.zip
          unzip -o render.zip
          sudo mv cli_v${{ env.RENDER_CLI_VERSION }} /usr/local/bin/render
          
      - name: Deploy Frontend
        # Comando corrigido com --output json --confirm para modo não interativo
        run: render deploys create ${{ secrets.RENDER_FRONTEND_SERVICE_ID }} --output json --confirm

      - name: Deploy Backend
        # Comando corrigido com --output json --confirm para modo não interativo
        run: render deploys create ${{ secrets.RENDER_BACKEND_SERVICE_ID }} --output json --confirm
