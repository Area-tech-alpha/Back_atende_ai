name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

env:
  NODE_VERSION: '20'

jobs:
  lint-and-type-check:
    name: Lint e Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      # Configuração do Node.js para o frontend
      - name: Setup Node.js (Frontend)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          # Caminho correto para o arquivo de lock do frontend
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Instalar dependências frontend
        # Navega para o diretório antes de rodar o npm
        run: cd frontend && npm ci

      # Configuração do Node.js para o backend
      - name: Setup Node.js (Backend)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          # Caminho correto para o arquivo de lock do backend
          cache-dependency-path: 'backend/package-lock.json'

      - name: Instalar dependências backend
        run: cd backend && npm ci

      - name: Lint frontend
        run: cd frontend && npm run lint

      - name: Type check frontend
        run: cd frontend && npm run type-check

      - name: Verificar sintaxe backend
        run: cd backend && node -c server.js
        
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: Instalar dependências frontend
        run: cd frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Upload artefatos
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 1
          
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
          
      - name: Instalar dependências backend
        run: cd backend && npm ci

      - name: Rodar testes backend
        run: cd backend && npm test
        
  docker-build-and-test:
    name: Docker Build e Teste
    runs-on: ubuntu-latest
    needs: [build-frontend, test-backend]
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Download build frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (Frontend)
        run: |
          docker build -t atende-frontend:test -f ./frontend/Dockerfile .

      - name: Build Docker image (Backend)
        run: |
          docker build -t atende-backend:test -f ./backend/Dockerfile .

      - name: Test Docker containers
        run: |
          docker run --rm -d -p 3000:3000 --name test-backend atende-backend:test
          sleep 10
          curl -f http://localhost:3000/health || exit 1
          docker stop test-backend

          docker run --rm -d -p 8080:80 --name test-frontend atende-frontend:test
          sleep 10
          curl -f http://localhost:8080 || exit 1
          docker stop test-frontend

  deploy-render:
    name: Deploy para Render
    runs-on: ubuntu-latest
    needs: [docker-build-and-test]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    env:
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }} 

    steps:
      - uses: actions/checkout@v4

      - name: Instalar Render CLI
        run: |
          curl -o /usr/local/bin/render-cli https://raw.githubusercontent.com/render-examples/render-cli/main/render-cli
          chmod +x /usr/local/bin/render-cli

      - name: Deploy Frontend
        run: render-cli deploy --service-id srv-d2b0713uibrs73f4i1kg

      - name: Deploy Backend
        run: render-cli deploy --service-id srv-d2b04nur433s7399qeq0
